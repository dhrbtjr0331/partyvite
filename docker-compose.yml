version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: party-postgres
    environment:
      POSTGRES_DB: party_db
      POSTGRES_USER: partyapp
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - party-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U partyapp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: party-backend
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/party_db
      SPRING_DATASOURCE_USERNAME: partyapp
      SPRING_DATASOURCE_PASSWORD: password
      JWT_SECRET: yourVeryLongSecretKeyThatIsAtLeast256BitsLong1234567890
      CORS_ALLOWED_ORIGINS: http://localhost
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - party-network
    restart: unless-stopped

  # React Frontend + Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: party-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - party-network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  party-network:
    driver: bridge